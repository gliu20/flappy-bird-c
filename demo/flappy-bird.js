/* This files provides address values that exist in the system */
const SDRAM_BASE = 0xC0000000;
const FPGA_CHAR_BASE = 0xC9000000;

/* Cyclone V FPGA devices */
const PS2_BASE = 0xFF200100;

/* VGA colors */
const WHITE = 0xFFFF;
const YELLOW = 0xFFE0;
const ORANGE = 0xFC00;
const SAND = 0xFEF0;
const LIGHT_GREEN = 0xA6F0;
const DARK_GREEN = 0x0460;
const BLACK = 0x0;

/* Screen size. */
const RESOLUTION_X = 320;
const RESOLUTION_Y = 240;

/* Flappy bird specific constants */
const SCROLL_VIEW_AMOUNT = 2;

/* Score */
const NUM_DIGITS = 10;

// Dimensions of the character font
const SCORE_CHAR_WIDTH = 4;
const SCORE_CHAR_HEIGHT = 6;

// Scaling; For example if 2, then font is drawn at twice
// its normal size
const SCORE_CHAR_SCALE = 2;
const SCORE_POS_X = (RESOLUTION_X - 30);
const SCORE_POS_Y = 10;

/* Pipes */
const NUM_PIPES = 4;
const PIPE_COLOR = 0x06F0;
const PIPE_WIDTH = 30;
const PIPE_HEAD_HEIGHT = 15;
const PIPE_VOID_HEIGHT = 70;
const PIPE_SPACING = 120;
const PIPE_START_X = 140;

/* Birds */
const BIRD_WIDTH = 34;
const BIRD_HEIGHT = 24;
const BIRD_INITIAL_X = 20;
const BIRD_INITIAL_Y = 100;
const BIRD_INITIAL_VELOCITY = -0.1;
const BIRD_JUMP_VELOCITY = 3.2;
const BIRD_GRAVITY = 0.4;

/* Modes */
const MODE_MENU = 0;
const MODE_GAME = 1;
const MODE_GAME_OVER = 2;

/* Background */
const GROUND_THICKNESS = 20;
const GRASS_THICKNESS = 10;
const TOTAL_FLOOR_HEIGHT = (GROUND_THICKNESS + GRASS_THICKNESS);
const SKY_THICKNESS = (RESOLUTION_Y - TOTAL_FLOOR_HEIGHT);
const GRASS_SQUARE_WIDTH = 10;
const SKY_IMG_NUM_OF_RUNS = 12994;

// This is calulated from (RESOLUTION_X) / GRASS_SQUARE_WIDTH
const NUM_GRASS_SQUARE = 34;

/* Key data */
const SPACE_KEY = 0x29;
const ENTER_KEY = 0x5A;
const BACK_SPACE_KEY = 0x66;

// Custom font for digits of image
const digits_image = [
    // Zero
    [
        [ 0, 0, 0, 0 ],
        [ 1, 1, 1, 0 ],
        [ 1, 0, 1, 0 ],
        [ 1, 0, 1, 0 ],
        [ 1, 0, 1, 0 ],
        [ 1, 1, 1, 0 ],
    ],

    // One
    [
        [ 0, 0, 0, 0 ],
        [ 0, 0, 1, 0 ],
        [ 0, 1, 1, 0 ],
        [ 0, 0, 1, 0 ],
        [ 0, 0, 1, 0 ],
        [ 0, 0, 1, 0 ],
    ],

    // Two
    [
        [ 0, 0, 0, 0 ],
        [ 1, 1, 1, 0 ],
        [ 0, 0, 1, 0 ],
        [ 1, 1, 1, 0 ],
        [ 1, 0, 0, 0 ],
        [ 1, 1, 1, 0 ],
    ],

    // Three
    [
        [ 0, 0, 0, 0 ],
        [ 1, 1, 1, 0 ],
        [ 0, 0, 1, 0 ],
        [ 1, 1, 1, 0 ],
        [ 0, 0, 1, 0 ],
        [ 1, 1, 1, 0 ],
    ],

    // Four
    [
        [ 0, 0, 0, 0 ],
        [ 1, 0, 1, 0 ],
        [ 1, 0, 1, 0 ],
        [ 1, 1, 1, 0 ],
        [ 0, 0, 1, 0 ],
        [ 0, 0, 1, 0 ],
    ],

    // Five
    [
        [ 0, 0, 0, 0 ],
        [ 1, 1, 1, 0 ],
        [ 1, 0, 0, 0 ],
        [ 1, 1, 1, 0 ],
        [ 0, 0, 1, 0 ],
        [ 1, 1, 1, 0 ],
    ],

    // Six
    [
        [ 0, 0, 0, 0 ],
        [ 1, 1, 1, 0 ],
        [ 1, 0, 0, 0 ],
        [ 1, 1, 1, 0 ],
        [ 1, 0, 1, 0 ],
        [ 1, 1, 1, 0 ],
    ],

    // Seven
    [
        [ 0, 0, 0, 0 ],
        [ 1, 1, 1, 0 ],
        [ 0, 0, 1, 0 ],
        [ 0, 1, 0, 0 ],
        [ 0, 1, 0, 0 ],
        [ 0, 1, 0, 0 ],
    ],

    // Eight
    [
        [ 0, 0, 0, 0 ],
        [ 1, 1, 1, 0 ],
        [ 1, 0, 1, 0 ],
        [ 1, 1, 1, 0 ],
        [ 1, 0, 1, 0 ],
        [ 1, 1, 1, 0 ],
    ],

    // Nine
    [
        [ 0, 0, 0, 0 ],
        [ 1, 1, 1, 0 ],
        [ 1, 0, 1, 0 ],
        [ 1, 1, 1, 0 ],
        [ 0, 0, 1, 0 ],
        [ 0, 0, 1, 0 ],
    ]
];


// Adapted from https://flappybird.io/img/background.png
// image for sky encoded using Run-Length Encoding in 565 RGB format
const sky_img_rle = [

];

const sky_img = Array(210).fill().map(x => Array(320).fill(0));
const canvas_buffer = Array(RESOLUTION_Y).fill().map(x => Array(RESOLUTION_X).fill(0));

const game = {
    grasses: Array(NUM_GRASS_SQUARE).fill().map(x => ({})),
    pipes: Array(NUM_PIPES).fill().map(x => ({})),
    bird: {},
    mode: 0,
    score: 0,
    best_score: 0,
    frame_count: 0
}

async function main() {

    initialize_game(game);
    initialize_screen(game);

    while (true) {
        switch (game.mode) {
            case MODE_GAME: await draw_game(game); break;
            case MODE_GAME_OVER: await draw_game_over(game); break;
            case MODE_MENU: await draw_menu(game, game.bird); break;

            // By default, go to menu
            default: await draw_menu(game, game.bird); break;
        }
    }
}

// Initializers
function initialize_sky() {
    let x = 0, y = 0;
    for (let i = 0; i < SKY_IMG_NUM_OF_RUNS; i += 2) {
        let color = sky_img_rle[i];
        let run_length = sky_img_rle[i + 1];

        // Expand out runs of the same color
        for (let j = 0; j < run_length; j++) {
            sky_img[y][x++] = color;

            // Convert to x,y coordinates
            if (x >= 320) {
                x = 0;
                y++;
            }
        } 
    }
}

function initialize_game(game) {
    game.mode = MODE_MENU;
    game.score = 0;
    game.best_score = 0;
    game.frame_count = 0;

    initialize_pipes(game.pipes);
    initialize_grasses(game.grasses);
    initialize_bird(game.bird);
    initialize_sky();
}

function initialize_pipe(pipe, i) {
    pipe.x = i * PIPE_SPACING + PIPE_START_X;
    pipe.y = rand() % (RESOLUTION_Y - PIPE_VOID_HEIGHT * 2 - TOTAL_FLOOR_HEIGHT) + PIPE_VOID_HEIGHT;
    pipe.width = PIPE_WIDTH;
    pipe.void_height = PIPE_VOID_HEIGHT;
    pipe.did_score_update = false;
}

function initialize_grass(grass, i) {
    grass.right_x = i * GRASS_SQUARE_WIDTH;  
    grass.left_x = grass.right_x - GRASS_SQUARE_WIDTH;
}

function initialize_grasses(grasses) {
    for (let i = 0; i < NUM_GRASS_SQUARE; i++) {
        initialize_grass(grasses[i], i);
    }
}

function initialize_pipes(pipes) {
    for (let i = 0; i < NUM_PIPES; i++) {
        initialize_pipe(pipes[i], i);
    }
}

function initialize_bird(bird) {
    bird.x = BIRD_INITIAL_X;
    bird.y = BIRD_INITIAL_Y;
    bird.y_velocity = BIRD_INITIAL_VELOCITY;
}

function initialize_screen(game) {
    // Initialization code is a lot simpler since
    // we dont need to set up double buffering on the hardware
    draw_background(game);
}


// Graphics
function is_out_of_bounds(x, min, max) {
    if (x > max) return true;
    if (x < min) return true;

    return false;
}


function clamp(x, min, max) {
    if (x > max) return max;
    if (x < min) return min;

    return x;
}

function is_offscreen(x, y) {
    if (is_out_of_bounds(x, 0, RESOLUTION_X - 1)) return true;
    if (is_out_of_bounds(y, 0, RESOLUTION_Y - 1)) return true;
    return false;
}

// No bounds checking
function draw_pixel(x, y, color) {
    change_color(color);
    fill_rect(x, y, x, y);
}

/**
 * Draws a rectangle where the coordinates are as specified
 * Note: We expect x0 < x1 and y0 < y1
 * @param x0 - top left corner
 * @param y0 - top left corner
 * @param x1 - bottom right corner
 * @param y1 - bottom right corner
 * @param line_color - color
*/
function draw_rect(x0, y0, x1, y1, color) {
    if (is_offscreen(x0, y0) && is_offscreen(x1, y1)) return;

    const clamped_x0 = clamp(x0, 0, RESOLUTION_X - 1);
    const clamped_x1 = clamp(x1, 0, RESOLUTION_X - 1);
    const clamped_y0 = clamp(y0, 0, RESOLUTION_Y - 1);
    const clamped_y1 = clamp(y1, 0, RESOLUTION_Y - 1);

    change_color(color);
    fill_rect(clamped_x0, clamped_y0, clamped_x1, clamped_y1);
}

/**
 * Draws a slanted rectangle where the coordinates are as specified
 * Note: We expect x0 < x1 and y0 < y1
 * @param x0 - top left corner
 * @param y0 - top left corner
 * @param x1 - bottom right corner
 * @param y1 - bottom right corner
 * @param line_color - color
*/
function draw_slanted_rect(x0, y0, x1, y1, color) {
    for (let x = x0; x <= x1; x++) {
        for (let y = y0, i = 0; y <= y1; y++, i++) {
            draw_pixel(x - i, y, color);
        }
    }
}

/**
 * Draws a rectangle outline where the coordinates are as specified
 * Note: We expect x0 < x1 and y0 < y1
 * @param x0 - top left corner
 * @param y0 - top left corner
 * @param x1 - bottom right corner
 * @param y1 - bottom right corner
 * @param line_color - color
*/
function draw_rect_outline(x0, y0, x1, y1, line_color) {
    for (let x = x0; x <= x1; x++) {
        draw_pixel(x, y0, line_color);
        draw_pixel(x, y1, line_color);
    }
    for (let y = y0; y <= y1; y++) {
        draw_pixel(x0, y, line_color);
        draw_pixel(x1, y, line_color);
    }
}

/**
 * Draws a slanted rectangle outline
 * Note: We expect x0 < x1 and y0 < y1
 * @param x0 - top left corner
 * @param y0 - top left corner
 * @param x1 - bottom right corner
 * @param y1 - bottom right corner
 * @param line_color - color
*/
function draw_slanted_rect_outline(x0, y0, x1, y1, line_color) {
    // TODO: known bug: we dont properly draw the horizontal lines of a slanted
    // rect in the right spots but this bug is not visually observable since
    // this is only used for drawing grass
    for (let x = x0; x <= x1; x++) {
        draw_pixel(x, y0, line_color);
        draw_pixel(x, y1, line_color);
    }
    for (let y = y0, i = 0; y <= y1; y++, i++) {
        draw_pixel(x0 - i, y, line_color);
        draw_pixel(x1 - i, y, line_color);
    }
}

function draw_pipe(pipe) {
    const x0 = pipe.x - (pipe.width / 2);
    const x1 = pipe.x + (pipe.width / 2);

    // Top Pipe
    const y_screen_top = 0;
    const y_top_pipe_edge = pipe.y - (pipe.void_height / 2);

    // Bottom pipe
    const y_bottom_pipe_edge = pipe.y + (pipe.void_height / 2);
    const y_screen_bottom = RESOLUTION_Y - TOTAL_FLOOR_HEIGHT - 1;

    // Draw top pipe, outline, pipe head outline
    draw_rect(x0, y_screen_top, x1, y_top_pipe_edge, PIPE_COLOR);
    draw_rect_outline(x0, y_screen_top - 1, x1, y_top_pipe_edge - PIPE_HEAD_HEIGHT, BLACK);
    draw_rect_outline(x0 - 1, y_top_pipe_edge - PIPE_HEAD_HEIGHT, x1 + 1, y_top_pipe_edge, BLACK);

    // Draw bottom pipe
    draw_rect(x0, y_bottom_pipe_edge, x1, y_screen_bottom, PIPE_COLOR);
    draw_rect_outline(x0, y_bottom_pipe_edge + PIPE_HEAD_HEIGHT, x1, y_screen_bottom, BLACK);
    draw_rect_outline(x0 - 1, y_bottom_pipe_edge, x1 + 1, y_bottom_pipe_edge + PIPE_HEAD_HEIGHT, BLACK);
}

function draw_pipes(pipes) {
    for (let i = 0; i < NUM_PIPES; i++) {
        draw_pipe(pipes[i]);
    }
}

function draw_bird(bird) {

    //modified based on this to draw bird: https://www.pinterest.com/pin/559924166147577544/
    draw_rect(bird.x - 2, bird.y + 10, bird.x - 1, bird.y + 13, BLACK);
    draw_rect(bird.x, bird.y + 8, bird.x + 1, bird.y + 9, BLACK);
	draw_rect(bird.x, bird.y + 10, bird.x + 1, bird.y + 11, WHITE);
    draw_rect(bird.x, bird.y + 12, bird.x + 1, bird.y + 13, YELLOW);
    draw_rect(bird.x, bird.y + 14, bird.x + 1, bird.y + 15, BLACK);
    draw_rect(bird.x + 10, bird.y, bird.x + 21, bird.y + 1, BLACK);
    draw_rect(bird.x + 6, bird.y + 2, bird.x + 9, bird.y + 3, BLACK);
    draw_rect(bird.x + 16, bird.y + 2, bird.x + 17, bird.y + 3, YELLOW);
    draw_rect(bird.x + 18, bird.y + 2, bird.x + 19, bird.y + 3, BLACK);
    draw_rect(bird.x + 20, bird.y + 2, bird.x + 21, bird.y + 3, WHITE);
    draw_rect(bird.x + 22, bird.y + 2, bird.x + 23, bird.y + 3, BLACK); 
    draw_rect(bird.x + 4, bird.y + 4, bird.x + 5, bird.y + 5, BLACK);
    draw_rect(bird.x + 6, bird.y + 4, bird.x + 9, bird.y + 5, YELLOW);
    draw_rect(bird.x + 16, bird.y + 4, bird.x + 17, bird.y + 9, BLACK);
    draw_rect(bird.x + 22, bird.y + 4, bird.x + 23, bird.y + 5, WHITE);
    draw_rect(bird.x + 24, bird.y + 4, bird.x + 25, bird.y + 5, BLACK); 
    draw_rect(bird.x + 2, bird.y + 6, bird.x + 7, bird.y + 7, BLACK);
    draw_rect(bird.x + 8, bird.y + 6, bird.x + 9, bird.y + 7, YELLOW);
    draw_rect(bird.x + 18, bird.y + 10, bird.x + 19, bird.y + 11, BLACK);
    draw_rect(bird.x + 18, bird.y + 4, bird.x + 21, bird.y + 9, WHITE); 
    draw_rect(bird.x + 22, bird.y + 6, bird.x + 23, bird.y + 9, BLACK);
    draw_rect(bird.x + 24, bird.y + 6, bird.x + 25, bird.y + 11, WHITE); 
    draw_rect(bird.x + 26, bird.y + 6, bird.x + 27, bird.y + 11, BLACK); 
    draw_rect(bird.x + 2, bird.y + 8, bird.x + 7, bird.y + 13, WHITE);
    draw_rect(bird.x + 8, bird.y + 8, bird.x + 9, bird.y + 9, BLACK);
    draw_rect(bird.x + 10, bird.y + 2, bird.x + 15, bird.y + 9, YELLOW);
    draw_rect(bird.x + 20, bird.y + 10, bird.x + 23, bird.y + 11, WHITE); 
	draw_rect(bird.x + 8, bird.y + 10, bird.x + 9, bird.y + 11, WHITE);
    draw_rect(bird.x + 8, bird.y + 12, bird.x + 9, bird.y + 13, YELLOW);
    draw_rect(bird.x + 10, bird.y + 10, bird.x + 11, bird.y + 13, BLACK);
    draw_rect(bird.x + 12, bird.y + 10, bird.x + 17, bird.y + 15, YELLOW); 
    draw_rect(bird.x + 18, bird.y + 12, bird.x + 19, bird.y + 13, YELLOW);
    draw_rect(bird.x + 20, bird.y + 12, bird.x + 29, bird.y + 13, BLACK); 
    draw_rect(bird.x + 2, bird.y + 14, bird.x + 7, bird.y + 15, YELLOW);
    draw_rect(bird.x + 8, bird.y + 14, bird.x + 9, bird.y + 15, BLACK);
    draw_rect(bird.x + 10, bird.y + 14, bird.x + 11, bird.y + 15, YELLOW);
    draw_rect(bird.x + 18, bird.y + 14, bird.x + 19, bird.y + 15, BLACK);
    draw_rect(bird.x + 20, bird.y + 14, bird.x + 29, bird.y + 15, ORANGE);
    draw_rect(bird.x + 30, bird.y + 14, bird.x + 31, bird.y + 15, BLACK); 
    draw_rect(bird.x + 2, bird.y + 16, bird.x + 7, bird.y + 17, BLACK);
    draw_rect(bird.x + 8, bird.y + 16, bird.x + 15, bird.y + 19, SAND);
    draw_rect(bird.x + 16, bird.y + 16, bird.x + 17, bird.y + 17, BLACK);
    draw_rect(bird.x + 18, bird.y + 16, bird.x + 19, bird.y + 17, ORANGE);
    draw_rect(bird.x + 20, bird.y + 16, bird.x + 29, bird.y + 17, BLACK); 
    draw_rect(bird.x + 6, bird.y + 18, bird.x + 7, bird.y + 19, BLACK);
    draw_rect(bird.x + 16, bird.y + 18, bird.x + 17, bird.y + 19, SAND);
    draw_rect(bird.x + 18, bird.y + 18, bird.x + 19, bird.y + 19, BLACK);
    draw_rect(bird.x + 20, bird.y + 18, bird.x + 27, bird.y + 19, ORANGE);
    draw_rect(bird.x + 28, bird.y + 18, bird.x + 29, bird.y + 19, BLACK); 
    draw_rect(bird.x + 8, bird.y + 20, bird.x + 11, bird.y + 21, BLACK);
    draw_rect(bird.x + 12, bird.y + 20, bird.x + 19, bird.y + 21, SAND);
    draw_rect(bird.x + 20, bird.y + 20, bird.x + 29, bird.y + 21, BLACK);
    draw_rect(bird.x + 12, bird.y + 22, bird.x + 19, bird.y + 23, BLACK); 
}

function draw_digit(digit, x_offset, x, y, color) {
    for (let i = 0; i < SCORE_CHAR_WIDTH; i++) {
        for (let j = 0; j < SCORE_CHAR_HEIGHT; j++) {
            const x_start = x + (i + x_offset) * SCORE_CHAR_SCALE;
            const y_start = y + j * SCORE_CHAR_SCALE;
            const x_end = x_start + SCORE_CHAR_SCALE;
            const y_end = y_start + SCORE_CHAR_SCALE;

            if (digits_image[digit][j][i])
                draw_rect(x_start, y_start, x_end, y_end, color);
        }
    }
}

function draw_integer(n, x, y, color) {
    let x_offset = 0;

    if (n == 0) return draw_digit(n, x_offset, x, y, color);

    while (n > 0) {
        const digit = n % 10;

        draw_digit(digit, x_offset, x, y, color);

        // Move to the left to render next digit. We have to move left
        // since we get digits in reverse order so we display digits
        // from right to left
        x_offset -= SCORE_CHAR_WIDTH;

        // Move on to next digit
        n = n / 10;
        
        // Cast to integer
        n = n | 0;
    }
}

/**
 * Draws the score at x, y where x, y specifies the 
 * top-right corner of the text to be drawn. This means text
 * will appear to the left of x, y
 * @param score
 * @param x
 * @param y
*/
function draw_score(score, x, y) {
    // Cheat to get outline on score
    draw_integer(score, x + 1, y + 1, BLACK);
    draw_integer(score, x - 1, y - 1, BLACK);
    draw_integer(score, x + 1, y - 1, BLACK);
    draw_integer(score, x - 1, y + 1, BLACK);

    // Draw score
    draw_integer(score, x, y, WHITE);
}

async function draw_game(game) {
    initialize_pipes(game.pipes);
    initialize_bird(game.bird);

    game.frame_count = 0;
    while (!is_game_over(game)) {
        redraw_background(game);
        draw_pipes(game.pipes);
        draw_bird(game.bird);
        draw_score(game.score, SCORE_POS_X, SCORE_POS_Y);

        do_scroll_view(game);
        do_bird_jump(game.bird);
        do_bird_velocity(game.bird);
        do_update_score(game);

        await next_frame();
        game.frame_count++;
    }

    game.mode = MODE_GAME_OVER;
}

async function draw_game_over(game) {
    do_update_best_score(game);

    game.frame_count = 0;
    while (game.mode == MODE_GAME_OVER) {
        redraw_background(game);

        //get the outline of "GAME OVER"
        draw_word_game_over(74, 30, BLACK);
		draw_word_game_over(76, 30, BLACK);
		draw_word_game_over(75, 29, BLACK);
		draw_word_game_over(75, 31, BLACK);
        //display "GAME OVER"
        draw_word_game_over(75, 30, WHITE);

        //display "SCORE: "
        //display "BEST: "
        //display "PRESS ENTER TO RESTART"
        //display "PRESS BACK TO GO TO MENU"
        const text_for_score = "SCORE:";
        const text_for_best_score = "BEST:";
        const text_for_restart = "PRESS ENTER TO PLAY AGAIN";
        const text_for_menu = "PRESS BACKSPACE TO GO TO MENU";


        // button shape for press enter to play again
        // and press backspace to go to menu
        draw_rect(70, 130, RESOLUTION_X - 70, 130 + 22, ORANGE);
        draw_rect(70, 162, RESOLUTION_X - 70, 162 + 22, ORANGE);
        draw_rect_outline(70, 130, RESOLUTION_X - 70, 130 + 22, BLACK);
        draw_rect_outline(70, 162, RESOLUTION_X - 70, 162 + 22, BLACK);

        //sisplay score and best score
        draw_score(game.score, 200, 67);
        draw_score(game.best_score, 200, 100);

        //check whether Enter or Back has pressed
        change_mode(game);
        do_scroll_grasses(game);

        
        //use character buffer
        video_text(27, 19, text_for_score);
        video_text(27, 27, text_for_best_score);
        video_text(27, 35, text_for_restart);
        video_text(25, 43, text_for_menu);

        await next_frame();
        game.frame_count++;
    }
}


async function draw_menu(game, bird) {
    
    game.frame_count = 0;
    game.best_score = 0;
    while (game.mode == MODE_MENU) {
        redraw_background(game);
        draw_bird(bird);

        //get the outline of  "FLAPPY BIRD"
        draw_flappy_bird(85, 45, BLACK);
        draw_flappy_bird(87, 45, BLACK);
        draw_flappy_bird(86, 44, BLACK);
        draw_flappy_bird(86, 46, BLACK);
         //display "FLAPPY BIRD"
        draw_flappy_bird(86, 45, WHITE);
        
        //display "PRESS SPACE TO LET THE BIRD JUMP"
        //display "PRESS ENTER TO START"
        const text_for_instruction = "PRESS SPACE TO LET THE BIRD JUMP";
        const text_to_display = "PRESS ENTER TO START";


        // button shape for press enter to start
        // and press space
        draw_rect(90, 110, RESOLUTION_X - 40, 110 + 22, ORANGE);
        draw_rect(90, 167, RESOLUTION_X - 40, 167 + 22, ORANGE);
        draw_rect_outline(90, 110, RESOLUTION_X - 40, 110 + 22, BLACK);
        draw_rect_outline(90, 167, RESOLUTION_X - 40, 167 + 22, BLACK);

        //check whether Enter has pressed
        change_mode(game);
        do_scroll_grasses(game);

        //use character buffer
        video_text(31, 30, text_for_instruction);
        video_text(37, 44, text_to_display);

        await next_frame();
        game.frame_count++;
    }
}



function draw_grasses(grass){
    const grass_top = RESOLUTION_Y - TOTAL_FLOOR_HEIGHT;
    const grass_bottom = RESOLUTION_Y - GROUND_THICKNESS;

    // Draw grass blocks
    for (let i = 0; i < NUM_GRASS_SQUARE; i++){
        const grass_color = i % 2 == 0 ? LIGHT_GREEN : DARK_GREEN;

        draw_slanted_rect(
            grass[i].left_x, 
            grass_top, 
            grass[i].right_x, 
            grass_bottom, 
            grass_color
        );
    }

    // Draw grass block outlines    
    for (let i = 0; i < NUM_GRASS_SQUARE; i++){
        draw_slanted_rect_outline(
            grass[i].left_x, 
            grass_top - 1, 
            grass[i].right_x, 
            grass_bottom + 1, 
            BLACK
        );
    }
}


function draw_sky() {
    for (let i = 0; i < RESOLUTION_X; i++) {
        for (let j = 0; j < SKY_THICKNESS; j++) {
            draw_pixel(i, j, sky_img[j][i]);
        }
    }
}

function draw_sky_rect(x0, y0, x1, y1) {
    for (let i = x0; i <= x1; i++) {
        for (let j = y0; j <= y1; j++) {
            draw_pixel(i, j, sky_img[j][i]);
        }
    }
}

function draw_background(game) {
    // draw sky
    draw_sky();
    
    //draw ground
    draw_rect(0, RESOLUTION_Y - GROUND_THICKNESS + 1, RESOLUTION_X, RESOLUTION_Y, SAND);
    //draw grass
    draw_grasses(game.grasses);
}

function draw_sky_partial_mode_game(game) {
    // Clear column for first pipe
    draw_sky_rect(0, 0, SCROLL_VIEW_AMOUNT * 3, SKY_THICKNESS - 1);

    // Clear column for bird
    draw_sky_rect(BIRD_INITIAL_X - 2, 0, BIRD_INITIAL_X + BIRD_WIDTH, SKY_THICKNESS - 1);

    // Clear at each pipe
    for (let i = 0; i < NUM_PIPES; i++) {
        const pipe = game.pipes[i];
        const pipe_x = pipe.x + PIPE_WIDTH / 2;

        // Clear a column at the curr pipe coordinate 
        draw_sky_rect(pipe_x, 0, pipe_x + SCROLL_VIEW_AMOUNT * 3, SKY_THICKNESS - 1);
    }

    // Clear out space for score
    draw_sky_rect(
        SCORE_POS_X - SCORE_CHAR_WIDTH * SCORE_CHAR_SCALE * 3, 
        SCORE_POS_Y, 
        SCORE_POS_X + SCORE_CHAR_WIDTH * SCORE_CHAR_SCALE, 
        SCORE_POS_Y + SCORE_CHAR_HEIGHT * SCORE_CHAR_SCALE + 1
    );
}

function draw_sky_partial_mode_game_over(game) {
    // Clear score area
    draw_sky_rect(70, 63, RESOLUTION_X - 70, 63 + 22);
    draw_sky_rect(70, 97, RESOLUTION_X - 70, 97 + 22);
}

function redraw_background(game) {
    // Draw only partial background after doing a full draw first
    if (game.frame_count < 2) draw_sky();
    else {
        switch (game.mode) {
            case MODE_GAME: draw_sky_partial_mode_game(game); break;
            case MODE_GAME_OVER: draw_sky_partial_mode_game_over(game); break;
            case MODE_MENU: draw_sky_partial_mode_game_over(game); break;
        }
    }
    
    //draw grass
    draw_grasses(game.grasses);
}

// Control bird's position
function do_bird_velocity(bird) {
    //update y position
    bird.y -= bird.y_velocity;

    //update y velocity
    bird.y_velocity -= BIRD_GRAVITY;
}

function do_bird_jump(bird){
    if (has_pressed_key(SPACE_KEY)) {
        bird.y_velocity = BIRD_JUMP_VELOCITY;
        clear_pressed_key(SPACE_KEY);
    }
}

function do_scroll_pipes(game) {

    let prev_pipe = game.pipes[NUM_PIPES - 1];
    
    // Wrap around pipes
    for (let i = 0; i < NUM_PIPES; i++) {
        let curr_pipe = game.pipes[i];

        if (curr_pipe.x < -PIPE_WIDTH / 2) {
            // Place pipe to the right of the previous pipe
            // since we know the previous pipe is the one that's on
            // the very right of the screen and is offscreen
            curr_pipe.did_score_update = false;
            curr_pipe.x = prev_pipe.x + PIPE_SPACING;
			
			// We also generate a new height for y position
			curr_pipe.y = rand() % (RESOLUTION_Y - PIPE_VOID_HEIGHT * 2 - TOTAL_FLOOR_HEIGHT) + PIPE_VOID_HEIGHT;

            // Cast to integer
            curr_pipe.y |= 0; 
        }

        prev_pipe = curr_pipe;
    }

    // Scroll pipes
    for (let i = 0; i < NUM_PIPES; i++) {
        const pipe = game.pipes[i];

        pipe.x -= SCROLL_VIEW_AMOUNT;
    }
}

function do_scroll_grasses(game) {
    // Scroll grasses
    let prev_grass = game.grasses[NUM_GRASS_SQUARE - 1];
    let curr_grass;

    // Wrap around grasses
    for (let i = 0; i < NUM_GRASS_SQUARE; i++) {
        curr_grass = game.grasses[i];

        if (curr_grass.right_x < 0) {
            // Place grass square to the right of the rightmost square
            curr_grass.left_x = prev_grass.right_x;
            curr_grass.right_x = prev_grass.right_x + GRASS_SQUARE_WIDTH;  
        }

        prev_grass = curr_grass;
    }

    // Move all grasses
    for (let i = 0; i < NUM_GRASS_SQUARE; i++) {
        const grass = game.grasses[i];

        grass.left_x -= SCROLL_VIEW_AMOUNT;
        grass.right_x -= SCROLL_VIEW_AMOUNT;
    }
}

function do_scroll_view(game) {   
    do_scroll_pipes(game);
    do_scroll_grasses(game);
}

function do_update_score(game) {
    for (let i = 0; i < NUM_PIPES; i++) {
        const pipe = game.pipes[i];

        const bird_center_x = game.bird.x + BIRD_WIDTH / 2;
        const did_pipe_pass_bird = pipe.x < bird_center_x;
        const did_score_update = pipe.did_score_update;

        if (did_pipe_pass_bird && !did_score_update) {
            pipe.did_score_update = true;
            game.score++;
        }
    }
}

function do_update_best_score(game){
    if (game.score > game.best_score) {
        game.best_score = game.score;
    }
}

/**
 * return true when the bird and the pipe collide, return false when they don't collide
*/
function did_collide(bird, pipe){
    //these four lines form a rectangle of void space between top pipe and bottom pipe
    //pipe_void_x1 < pipe_void_x2, pipe_void_y1 < pipe_void_y2
    const pipe_void_x1 = pipe.x - (pipe.width / 2);
    const pipe_void_x2 = pipe.x + (pipe.width / 2);
    const pipe_void_y1 = pipe.y - (pipe.void_height / 2);
    const pipe_void_y2 = pipe.y + (pipe.void_height / 2);

    //check whether the bird and the pipe collides
    //the bird hasn't reached the pipe or the bird has already passed the pipe
    if (bird.x + BIRD_WIDTH - 1 < pipe_void_x1 || bird.x > pipe_void_x2){
        return false;
    }
    //some portion of the bird is in between the top and bottom pipe
    else {
        //y coordinate of the bird is within the void region
        if (bird.y >= pipe_void_y1 && bird.y + BIRD_HEIGHT - 1 <= pipe_void_y2) {
            return false;
        }
        //the bird and the pipe collide
        else {
            return true;
        }
    }
}

function bird_in_screen(bird) {
    return is_out_of_bounds(bird.y, 0, RESOLUTION_Y - TOTAL_FLOOR_HEIGHT - BIRD_HEIGHT);
}

// Game logic
function is_game_over(game) {
    for (let i = 0; i < NUM_PIPES; i++) {
        if (did_collide(game.bird, game.pipes[i]))
            return true;
    }

    return bird_in_screen(game.bird);
}

function change_mode(game) {
    if (has_pressed_key(ENTER_KEY)) {
        clear_pressed_key(ENTER_KEY);

        if (game.mode == MODE_MENU || game.mode == MODE_GAME_OVER) {
            game.mode = MODE_GAME;
            game.score = 0;

            initialize_pipes(game.pipes);
            initialize_grasses(game.grasses);
            initialize_bird(game.bird);
        }
    }
    else if (has_pressed_key(BACK_SPACE_KEY)) {
        clear_pressed_key(BACK_SPACE_KEY);

        game.mode = MODE_MENU;
        game.score = 0;

        initialize_pipes(game.pipes);
        initialize_grasses(game.grasses);
        initialize_bird(game.bird);
    }
}

// Screen/VGA

function video_text(x, y, str) {
    fill_text(x * 4 - 10, y * 4 + 4, str);
}


function draw_flappy_bird(x, y, line_color){
    //draw F
    draw_rect(x + 1, y, x + 3, y + 17, line_color);
    draw_rect(x + 3, y, x + 14, y + 2, line_color);
    draw_rect(x + 3, y + 7, x + 12, y + 9, line_color);
    //draw L
	draw_rect(x + 20, y, x + 22, y + 17, line_color);
    draw_rect(x + 22, y + 15, x + 32, y + 17, line_color);
    //draw A
    draw_rect(x + 44, y, x + 48, y + 1, line_color); 
    draw_rect(x + 43, y + 2, x + 45, y + 4, line_color);
    draw_rect(x + 42, y + 5, x + 44, y + 7, line_color);
    draw_rect(x + 41, y + 8, x + 43, y + 10, line_color);
    draw_rect(x + 40, y + 11, x + 42, y + 13, line_color);
    draw_rect(x + 39, y + 14, x + 41, y + 16, line_color);
    draw_rect(x + 38, y + 17, x + 40, y + 17, line_color);
    draw_rect(x + 47, y + 2, x + 49, y + 4, line_color);
    draw_rect(x + 48, y + 5, x + 50, y + 7, line_color);
    draw_rect(x + 49, y + 8, x + 51, y + 10, line_color);
    draw_rect(x + 50, y + 11, x + 52, y + 13, line_color);
    draw_rect(x + 51, y + 14, x + 53, y + 16, line_color);
    draw_rect(x + 52, y + 17, x + 54, y + 17, line_color);
    draw_rect(x + 43, y + 9, x + 49, y + 11, line_color);
    //draw P
    draw_rect(x + 58, y, x + 60, y + 17, line_color); 
    draw_rect(x + 61, y, x + 66, y + 1, line_color);
    draw_rect(x + 67, y + 1, x + 69, y + 1, line_color);
    draw_rect(x + 67, y + 2, x + 70, y + 2, line_color);
    draw_rect(x + 69, y + 3, x + 71, y + 3, line_color);
    draw_rect(x + 69, y + 4, x + 71, y + 5, line_color);
    draw_rect(x + 69, y + 6, x + 71, y + 6, line_color);
    draw_rect(x + 67, y + 7, x + 70, y + 7, line_color);
    draw_rect(x + 67, y + 8, x + 69, y + 8, line_color);
    draw_rect(x + 61, y + 8, x + 66, y + 9, line_color);
    //draw P
    draw_rect(x + 77, y, x + 79, y + 17, line_color); 
    draw_rect(x + 80, y, x + 85, y + 1, line_color);
    draw_rect(x + 86, y + 1, x + 88, y + 1, line_color);
    draw_rect(x + 86, y + 2, x + 89, y + 2, line_color);
    draw_rect(x + 88, y + 3, x + 90, y + 3, line_color);
    draw_rect(x + 88, y + 4, x + 90, y + 5, line_color);
    draw_rect(x + 88, y + 6, x + 90, y + 6, line_color);
    draw_rect(x + 86, y + 7, x + 89 , y + 7, line_color);
    draw_rect(x + 86, y + 8, x + 88, y + 8, line_color);
    draw_rect(x + 80, y + 8, x + 85, y + 9, line_color);
    //draw Y
    draw_rect(x + 95, y, x + 97, y, line_color); 
    draw_rect(x + 96, y + 1, x + 98, y + 2, line_color);
    draw_rect(x + 97, y + 3, x + 99, y + 3, line_color);
    draw_rect(x + 98, y + 4, x + 100, y + 5, line_color);
    draw_rect(x + 99, y + 6, x + 101, y + 6, line_color);
    draw_rect(x + 100, y + 7, x + 102, y + 7, line_color);
    draw_rect(x + 101, y + 8, x + 104, y + 8, line_color);
    draw_rect(x + 108, y, x + 110, y, line_color);
    draw_rect(x + 107, y + 1, x + 109, y + 2, line_color);
    draw_rect(x + 106, y + 3, x + 108, y + 3, line_color);
    draw_rect(x + 105, y + 4, x + 107, y + 5, line_color);
    draw_rect(x + 104, y + 6, x + 106, y + 6, line_color);
    draw_rect(x + 103, y + 7, x + 105, y + 7, line_color);
    draw_rect(x + 101, y + 9, x + 104, y + 17, line_color);

    //starting point of B
    const bird_x = x + 130;

    //draw B
    draw_rect(bird_x + 1, y, bird_x + 3, y + 17, line_color); 
    draw_rect(bird_x + 4, y, bird_x + 9, y + 1, line_color);
    draw_rect(bird_x + 10, y + 1, bird_x + 12, y + 1, line_color);
    draw_rect(bird_x + 10, y + 2, bird_x + 13, y + 2, line_color);
    draw_rect(bird_x + 12, y + 3, bird_x + 14, y + 3, line_color);
    draw_rect(bird_x + 12, y + 4, bird_x + 14, y + 5, line_color);
    draw_rect(bird_x + 12, y + 6, bird_x + 14, y + 6, line_color);
    draw_rect(bird_x + 10, y + 7, bird_x + 13, y + 7, line_color);
    draw_rect(bird_x + 4, y + 8, bird_x + 12, y + 9, line_color);
    draw_rect(bird_x + 4, y + 16, bird_x + 9, y + 17, line_color);
    draw_rect(bird_x + 10, y + 16, bird_x + 12, y + 16, line_color);
    draw_rect(bird_x + 10, y + 15, bird_x + 13, y + 15, line_color);
    draw_rect(bird_x + 12, y + 14, bird_x + 14, y + 14, line_color);
    draw_rect(bird_x + 12, y + 12, bird_x + 14, y + 13, line_color);
    draw_rect(bird_x + 12, y + 11, bird_x + 14, y + 11, line_color);
    draw_rect(bird_x + 10, y + 10, bird_x + 13, y + 10, line_color);
    //draw I
    draw_rect(bird_x + 21, y, bird_x + 30, y + 2, line_color); 
    draw_rect(bird_x + 24, y + 2, bird_x + 27, y + 15, line_color);
    draw_rect(bird_x + 21, y + 15, bird_x + 30, y + 17, line_color);
    //draw R
    draw_rect(bird_x + 37, y, bird_x + 39, y + 17, line_color); 
    draw_rect(bird_x + 40, y, bird_x + 45, y + 1, line_color);
    draw_rect(bird_x + 46, y + 1, bird_x + 48, y + 1, line_color);
    draw_rect(bird_x + 46, y + 2, bird_x + 49, y + 2, line_color);
    draw_rect(bird_x + 48, y + 3, bird_x + 50, y + 3, line_color);
    draw_rect(bird_x + 48, y + 4, bird_x + 50, y + 5, line_color);
    draw_rect(bird_x + 48, y + 6, bird_x + 50, y + 6, line_color);
    draw_rect(bird_x + 46, y + 7, bird_x + 49, y + 7, line_color);
    draw_rect(bird_x + 46, y + 8, bird_x + 48, y + 8, line_color);
    draw_rect(bird_x + 40, y + 8, bird_x + 45, y + 9, line_color);
    draw_rect(bird_x + 43, y + 9, bird_x + 45, y + 10, line_color);
	draw_rect(bird_x + 44, y + 10, bird_x + 46, y + 10, line_color);
    draw_rect(bird_x + 45, y + 11, bird_x + 47, y + 11, line_color);
    draw_rect(bird_x + 46, y + 12, bird_x + 48, y + 13, line_color);
    draw_rect(bird_x + 47, y + 14, bird_x + 49, y + 14, line_color);
    draw_rect(bird_x + 48, y + 15, bird_x + 50, y + 16, line_color);
    draw_rect(bird_x + 49, y + 17, bird_x + 51, y + 17, line_color);
    //draw D
    draw_rect(bird_x + 57, y, bird_x + 59, y + 17, line_color); 
    draw_rect(bird_x + 60, y, bird_x + 63, y + 1, line_color);
    draw_rect(bird_x + 64, y + 1, bird_x + 65, y + 2, line_color);
    draw_rect(bird_x + 65, y + 2, bird_x + 67, y + 3, line_color); 
    draw_rect(bird_x + 66, y + 3, bird_x + 68, y + 4, line_color);
    draw_rect(bird_x + 67, y + 5, bird_x + 69, y + 6, line_color);
    draw_rect(bird_x + 68, y + 7, bird_x + 70, y + 10, line_color);
    draw_rect(bird_x + 60, y + 16, bird_x + 63, y + 17, line_color);
    draw_rect(bird_x + 64, y + 15, bird_x + 65, y + 16, line_color);
    draw_rect(bird_x + 65, y + 14, bird_x + 67, y + 15, line_color); 
    draw_rect(bird_x + 66, y + 13, bird_x + 68, y + 14, line_color);
    draw_rect(bird_x + 67, y + 11, bird_x + 69, y + 12, line_color);
}

function draw_word_game_over(x, y, line_color){
    //draw G 
    draw_rect(x + 1, y + 6, x + 3, y + 11, line_color);
    draw_rect(x + 2, y + 3, x + 4, y + 5, line_color);
    draw_rect(x + 4, y + 1, x + 5, y + 3, line_color);
    draw_rect(x + 6, y, x + 6, y + 2, line_color);
    draw_rect(x + 7, y, x + 10, y + 1, line_color);  
    draw_rect(x + 11, y, x + 11, y + 2, line_color);
    draw_rect(x + 12, y + 1, x + 12, y + 3, line_color);
    draw_rect(x + 13, y + 2, x + 14, y + 3, line_color);
    draw_rect(x + 2, y + 12, x + 4, y + 14, line_color);
    draw_rect(x + 4, y + 14, x + 5, y + 16, line_color);
    draw_rect(x + 6, y + 15, x + 6, y + 17, line_color);
    draw_rect(x + 7, y + 16, x + 10, y + 17, line_color);  
    draw_rect(x + 10, y + 15, x + 11, y + 17, line_color);
    draw_rect(x + 12, y + 14, x + 13, y + 16, line_color);
    draw_rect(x + 14, y + 13, x + 15, y + 14, line_color);
    draw_rect(x + 14, y + 8, x + 16, y + 12, line_color);
    draw_rect(x + 9, y + 8, x + 14, y + 10, line_color);
    //draw A
    draw_rect(x + 26, y, x + 30, y + 1, line_color); 
    draw_rect(x + 25, y + 2, x + 27, y + 4, line_color);
    draw_rect(x + 24, y + 5, x + 26, y + 7, line_color);
    draw_rect(x + 23, y + 8, x + 25, y + 10, line_color);
    draw_rect(x + 22, y + 11, x + 24, y + 13, line_color);
    draw_rect(x + 21, y + 14, x + 23, y + 16, line_color);  
    draw_rect(x + 20, y + 17, x + 22, y + 17, line_color);
    draw_rect(x + 29, y + 2, x + 31, y + 4, line_color);
    draw_rect(x + 30, y + 5, x + 32, y + 7, line_color);
    draw_rect(x + 31, y + 8, x + 33, y + 10, line_color);
    draw_rect(x + 32, y + 11, x + 34, y + 13, line_color);
    draw_rect(x + 33, y + 14, x + 35, y + 16, line_color);
    draw_rect(x + 34, y + 17, x + 36, y + 17, line_color);
    draw_rect(x + 25, y + 9, x + 31, y + 11, line_color);
    //draw M
    draw_rect(x + 40, y, x + 42, y + 17, line_color); 
    draw_rect(x + 43, y, x + 43, y + 2, line_color);
    draw_rect(x + 44, y + 1, x + 45, y + 9, line_color);
    draw_rect(x + 45, y + 10, x + 46, y + 15, line_color);
    draw_rect(x + 47, y + 15, x + 48, y + 17, line_color);
    draw_rect(x + 53, y, x + 55, y + 17, line_color); 
    draw_rect(x + 52, y, x + 52, y + 2, line_color);
    draw_rect(x + 50, y + 1, x + 51, y + 9, line_color);
    draw_rect(x + 49, y + 10, x + 50, y + 15, line_color);
    //draw E
    draw_rect(x + 60, y, x + 62, y + 17, line_color);
    draw_rect(x + 62, y, x + 73, y + 2, line_color);
    draw_rect(x + 62, y + 7, x + 71, y + 9, line_color);
    draw_rect(x + 62, y + 15, x + 73, y + 17, line_color);

    //starting point of O
    const over_x = x + 94;

    //draw O
    draw_rect(over_x + 1, y + 6, over_x + 3, y + 11, line_color);
    draw_rect(over_x + 2, y + 3, over_x + 4, y + 5, line_color);
    draw_rect(over_x + 4, y + 1, over_x + 5, y + 3, line_color);
    draw_rect(over_x + 6, y, over_x + 6, y + 2, line_color);
    draw_rect(over_x + 7, y, over_x + 10, y + 1, line_color);  
    draw_rect(over_x + 11, y, over_x + 11, y + 2, line_color);
    draw_rect(over_x + 12, y + 1, over_x + 13, y + 3, line_color);
    draw_rect(over_x + 13, y + 3, over_x + 15, y + 5, line_color);
    draw_rect(over_x + 2, y + 12, over_x + 4, y + 14, line_color);
    draw_rect(over_x + 4, y + 14, over_x + 5, y + 16, line_color);
    draw_rect(over_x + 6, y + 15, over_x + 6, y + 17, line_color);
    draw_rect(over_x + 7, y + 16, over_x + 10, y + 17, line_color);  
    draw_rect(over_x + 11, y + 15, over_x + 11, y + 17, line_color);
    draw_rect(over_x + 12, y + 14, over_x + 13, y + 16, line_color);
    draw_rect(over_x + 13, y + 12, over_x + 15, y + 14, line_color);
	draw_rect(over_x + 14, y + 6, over_x + 16, y + 11, line_color);
    //draw V
    draw_rect(over_x + 20, y, over_x + 22, y + 1, line_color);
	draw_rect(over_x + 21, y + 1, over_x + 23, y + 2, line_color);
	draw_rect(over_x + 22, y + 3, over_x + 24, y + 6, line_color);
	draw_rect(over_x + 23, y + 7, over_x + 25, y + 8, line_color);
    draw_rect(over_x + 24, y + 9, over_x + 26, y + 12, line_color);
    draw_rect(over_x + 25, y + 13, over_x + 27, y + 14, line_color);
    draw_rect(over_x + 26, y + 15, over_x + 29, y + 17, line_color);
	draw_rect(over_x + 33, y, over_x + 35, y + 1, line_color);
	draw_rect(over_x + 32, y + 1, over_x + 34, y + 2, line_color);
	draw_rect(over_x + 31, y + 3, over_x + 33, y + 6, line_color);
	draw_rect(over_x + 30, y + 7, over_x + 32, y + 8, line_color);
    draw_rect(over_x + 29, y + 9, over_x + 31, y + 12, line_color);
    draw_rect(over_x + 28, y + 13, over_x + 30, y + 14, line_color);
    //draw E
    draw_rect(over_x + 40, y, over_x + 42, y + 17, line_color);
    draw_rect(over_x + 42, y, over_x + 53, y + 2, line_color);
    draw_rect(over_x + 42, y + 7, over_x + 50, y + 9, line_color);
    draw_rect(over_x + 42, y + 15, over_x + 53, y + 17, line_color);
    //draw R
    draw_rect(over_x + 59, y, over_x + 61, y + 17, line_color); 
    draw_rect(over_x + 62, y, over_x + 67, y + 1, line_color);
    draw_rect(over_x + 68, y + 1, over_x + 70, y + 1, line_color);
    draw_rect(over_x + 68, y + 2, over_x + 71, y + 2, line_color);
    draw_rect(over_x + 70, y + 3, over_x + 72, y + 3, line_color);
    draw_rect(over_x + 70, y + 4, over_x + 72, y + 5, line_color);
    draw_rect(over_x + 70, y + 6, over_x + 72, y + 6, line_color);
    draw_rect(over_x + 68, y + 7, over_x + 71, y + 7, line_color);
    draw_rect(over_x + 68, y + 8, over_x + 70, y + 8, line_color);
    draw_rect(over_x + 62, y + 8, over_x + 67, y + 9, line_color);
    draw_rect(over_x + 65, y + 9, over_x + 67, y + 10, line_color);
	draw_rect(over_x + 66, y + 10, over_x + 68, y + 10, line_color);
    draw_rect(over_x + 67, y + 11, over_x + 69, y + 11, line_color);
    draw_rect(over_x + 68, y + 12, over_x + 70, y + 13, line_color);
    draw_rect(over_x + 69, y + 14, over_x + 71, y + 14, line_color);
    draw_rect(over_x + 70, y + 15, over_x + 72, y + 16, line_color);
    draw_rect(over_x + 71, y + 17, over_x + 73, y + 17, line_color);
}
